require('dotenv').config();
process.env.TZ = 'Asia/Seoul';

const express       = require('express');
const axios         = require('axios');
const { MongoClient } = require('mongodb');

const {
  MONGODB_URI,
  DB_NAME,
  CAFE24_CLIENT_ID,
  CAFE24_CLIENT_SECRET,
  APP_URL,
  PORT = 5000
} = process.env;

const app = express();

// ‚îÄ‚îÄ‚îÄ MongoDB Ïó∞Í≤∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
let db;
async function initDb() {
  const client = new MongoClient(MONGODB_URI);
  await client.connect();
  db = client.db(DB_NAME);
  console.log('‚ñ∂Ô∏è MongoDB connected');
}

// ‚îÄ‚îÄ‚îÄ (A) ÏÑ§Ïπò ÏãúÏûë: Í∂åÌïú ÏöîÏ≤≠ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app.get('/install/:mallId', (req, res) => {
  const { mallId }  = req.params;
  const redirectUri = `${APP_URL}/auth/callback`;
  const params = new URLSearchParams({
    response_type: 'code',
    client_id:     CAFE24_CLIENT_ID,
    redirect_uri:  redirectUri,
    scope:         'mall.read_category,mall.read_product,mall.read_analytics',
    state:         'app_install',
  });
  console.log('üîç redirect_uri ‚Üí', redirectUri);
  console.log('üëâ Í∂åÌïúÏöîÏ≤≠ URL ‚Üí', `https://${mallId}.cafe24.com/api/v2/oauth/authorize?${params}`);
  res.redirect(`https://${mallId}.cafe24.com/api/v2/oauth/authorize?${params}`);
});

// ‚îÄ‚îÄ‚îÄ (B) ÏΩúÎ∞± Ìï∏Îì§Îü¨: code ‚Üí Ïï°ÏÑ∏Ïä§/Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ ÍµêÌôò + DB Ï†ÄÏû• ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app.get('/auth/callback', async (req, res) => {
  console.log('--- /auth/callback called ---');
  console.log('‚ö° req.query:', req.query);

  const { code, mall_id: mallId } = req.query;
  const redirectUri = `${APP_URL}/auth/callback`;
  console.log('‚ö° expected redirectUri:', redirectUri);

  if (!code || !mallId) {
    console.warn('‚ö†Ô∏è Missing code or mallId');
    return res.status(400).send('code ÎòêÎäî mall_idÍ∞Ä ÏóÜÏäµÎãàÎã§.');
  }

  try {
    // 1) ÌÜ†ÌÅ∞ ÍµêÌôò ÏöîÏ≤≠ Ï§ÄÎπÑ
    const tokenUrl = `https://${mallId}.cafe24api.com/api/v2/oauth/token`;
    const creds    = Buffer.from(
      `${CAFE24_CLIENT_ID}:${CAFE24_CLIENT_SECRET}`
    ).toString('base64');
    const body = new URLSearchParams({
      grant_type:   'authorization_code',
      code,
      redirect_uri: redirectUri
    }).toString();

    console.log('‚ñ∂Ô∏è Token request to:', tokenUrl);
    console.log('   Headers:', {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Authorization': `Basic ${creds}`
    });
    console.log('   Body:', body);

    // 2) Ïã§Ï†ú ÌÜ†ÌÅ∞ ÍµêÌôò ÏöîÏ≤≠
    const response = await axios.post(tokenUrl, body, {
      headers: {
        'Content-Type':  'application/x-www-form-urlencoded',
        'Authorization': `Basic ${creds}`
      }
    });
    console.log('‚úÖ Token endpoint responded:', response.data);

    const { access_token, refresh_token, expires_in } = response.data;

    // 3) MongoDBÏóê mallId Î≥ÑÎ°ú Ï†ÄÏû•
    console.log('‚ñ∂Ô∏è Saving tokens to DB for mallId:', mallId);
    await db.collection('token').updateOne(
      { mallId },
      { $set: {
          mallId,
          accessToken:  access_token,
          refreshToken: refresh_token,
          obtainedAt:   new Date(),
          expiresIn:    expires_in
        }
      },
      { upsert: true }
    );
    console.log(`‚úÖ [${mallId}] Tokens saved successfully`);

    // 4) ÏôÑÎ£å ÏùëÎãµ
    res.send('Ïï± ÏÑ§Ïπò¬∑ÌÜ†ÌÅ∞ ÍµêÌôò ÏôÑÎ£å! DBÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.');
  }
  catch (err) {
    console.error('‚ùå Error during token exchange or DB save:', err.response?.data || err);
    res.status(500).send('ÌÜ†ÌÅ∞ ÍµêÌôò Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
  }
});

// ‚îÄ‚îÄ‚îÄ ÏÑúÎ≤Ñ ÏãúÏûë ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
initDb().then(() => {
  app.listen(PORT, () => {
    console.log(`‚ñ∂Ô∏è Server running on port ${PORT}`);
  });
});
